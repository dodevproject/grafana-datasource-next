name: Build and Release Grafana Plugin on ARM Ubuntu

on:
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.19.x]
        node-version: [16.x]
        architecture: [arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies (Backend)
        run: go mod download

      - name: Install Dependencies (Frontend)
        run: npm install

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ matrix.architecture }}

      - name: Run Mage (Backend Build)
        uses: docker://docker.io/library/golang:${{ matrix.go-version }}-alpine
        with:
          args: mage -v build
        env:
          GOOS: linux
          GOARCH: ${{ matrix.architecture }}
          CGO_ENABLED: 0

      - name: Build Frontend
        run: npm run build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Package Plugin
        run: |
          mkdir -p release-artifacts
          cp -r dist release-artifacts/
          cp -r LICENSE README.md release-artifacts/
          # Assuming the backend binary is placed in the root after 'mage -v build'
          cp plugin-linux-${{ matrix.architecture }} release-artifacts/
          cd release-artifacts
          zip -r ../plugin-${{ matrix.architecture }}.zip .

      - name: Upload Release Asset (Backend & Frontend)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./plugin-${{ matrix.architecture }}.zip
          asset_name: plugin-linux-${{ matrix.architecture }}.zip
          asset_content_type: application/zip
